+package graphs
+alias sprintf org.eolang.txt.sprintf
+alias org.eolang.util.ieee754.infinity

#int dfs(int u, int Cmin):
#    if u = t
#        return Cmin
#    visited[u] = true
#    for v in u.children
#        auto uv = edge(u, v)
#        if not visited[v] and uv.f < uv.c
#            int delta = dfs(v, min(Cmin, uv.c - uv.f))
#            if delta > 0
#                uv.f += delta
#                uv.backEdge.f -= delta
#                return delta
#    return 0

[graphAdjList iStartVertex iEndVertex] > fordFulkerson
  dfs > @
    iStartVertex
    infinity
    initialVisited

  map. > initialVisited
    graphAdjList
    []
      [current] > map
        false > @

[arr] > min
  reduce. > @
    arr
    get.
      arr
      0
    []
      [accum current] > reduce
        if. > @
          greater.
            accum
            current
          current
          accum

  [iSubStartVertex minCapacity visited] > dfs
  [finalDelta finalGraph] > resultStructure
    if. > @
      iSubStartVertex.eq (^.iEndVertex)
      minCapacity
      reduce.
        (^.graphAdjList.adjacencies.get iSubStartVertex).edges
        0 > resultStructure.finalDelta
        ^.graphAdjList > resultStructure.finalGraph
        []
          [accumulator current] > reduce
            resultStructure
            ^.^.dfs > delta
              current.ivertex
              min
                *
                  ^.^.minCapacity
                  sub.
                    current.weight
                    current.remaining
              ^.^.visited
            if. > @
              and.
                not
                  ^.^.visited.get (current.ivertex)
                less.  
                  current.remaining
                  current.weight
              if.
                delta.greater 0
                resultStructure
                  ^.^.finalDelta.add delta
                  adjacencyList
                    replace.
                      ^.^.finalGraph.adjacencies
                      ^.^.^.iSubStartVertex
                      adjacency
                        (^.^.finalGraph.adjacencies.get (^.^.^.iSubStartVertex)).vertex
                        replace.
                          (^.^.finalGraph.adjacencies.get (^.^.^.iSubStartVertex)).edges
                          current.ivertex
                          edge
                            current.ivertex
                            add.
                              current.remaining
                              delta
                            sub.
                              current.weight
                              delta
                accumulator
